package com.gosqo.flyinheron.domain;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.EntityManagerFactory;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;

import static org.assertj.core.api.Assertions.assertThat;

@Slf4j
class BaseEntityTest extends EntityManagerDataInitializer {

    @Autowired
    public BaseEntityTest(EntityManagerFactory emf) {
        super(emf);
    }

    private TestEntity newTestEntity() {
        return new TestEntity("This is a TestEntity.", 999L, true);
    }

    @Test
    void can_persist_TestEntity_with_fields_in_BaseEntity() {
        TestEntity testEntity = newTestEntity();
//        log.info("{}", testEntity);
/*
        TestEntity{
            field1='This is a TestEntity.'
                    , field2=999
                    , field3=true
                    , id=null
                    , status=null
                    , registeredAt=null
                    , updatedAt=null
                    , contentModifiedAt=null
                    , deletedAt=null
        }
*/

        em.persist(testEntity);
        transaction.commit();
//        log.info("{}", testEntity);
/*
        TestEntity{
            field1='This is a TestEntity.'
            , field2=999
            , field3=true
            , id=1
            , status=ACTIVE
            , registeredAt=2024-08-23T14:23:43.682872
            , updatedAt=2024-08-23T14:23:43.682872
            , contentModifiedAt=null
            , deletedAt=null
        }
*/

        assertThat(testEntity.getId()).isNotNull();
        assertThat(testEntity.getStatus()).isEqualTo(EntityStatus.ACTIVE);
        assertThat(testEntity.isActive()).isTrue();

        assertThat(testEntity.getRegisteredAt()).isNotNull();
        assertThat(testEntity.getRegisteredAt()).isEqualTo(testEntity.getUpdatedAt());

        assertThat(testEntity.getDeletedAt()).isNull();
        assertThat(testEntity.getContentModifiedAt()).isNull();
    }

    @Test
    void can_set_status_soft_deleted() {
        var testEntity = newTestEntity();

        em.persist(testEntity);

        testEntity.softDelete();

        transaction.commit();

        var found = em.find(TestEntity.class, testEntity.getId());

        assertThat(found.getStatus()).isEqualTo(EntityStatus.SOFT_DELETED);
        assertThat(found.isSoftDeleted()).isTrue();
    }

    @Test
    void once_persisted_can_toggle_status_of_entity() {
        var testEntity = newTestEntity();

        em.persist(testEntity); // 저장
        transaction.commit();

        var found = em.find(TestEntity.class, testEntity.getId());
        assertThat(found.getDeletedAt()).isNull();

        transaction.begin();
        found.softDelete(); // 소프트 삭제
        transaction.commit();

        var softDeletedEntity = em.find(TestEntity.class, found.getId());

        assertThat(softDeletedEntity.getDeletedAt()).isNotNull();
        assertThat(softDeletedEntity.getStatus()).isEqualTo(EntityStatus.SOFT_DELETED);
        assertThat(softDeletedEntity.isSoftDeleted()).isTrue();
        assertThat(softDeletedEntity.getUpdatedAt()).isNotEqualTo(softDeletedEntity.getRegisteredAt());

        transaction.begin();
        softDeletedEntity.activate(); // 소프트 삭제된 엔티티 재활성화
        transaction.commit();

        var activatedEntity = em.find(TestEntity.class, softDeletedEntity.getId());

        assertThat(activatedEntity.getStatus()).isEqualTo(EntityStatus.ACTIVE);
        assertThat(activatedEntity.isActive()).isTrue();
        assertThat(activatedEntity.isSoftDeleted()).isFalse(); // 위 코드라인이 수행하는 불리언 값
        assertThat(activatedEntity.getDeletedAt()).isNull();
    }
}

@Getter
@AllArgsConstructor
@Entity
class TestEntity extends IdentityBaseEntity {
    private String field1;
    private Long field2;
    @Column(nullable = false)
    private Boolean field3;

    protected void prePersist() {
        super.status = EntityStatus.ACTIVE;
    }

    @Override
    public String toString() {
        return "\nTestEntity{" +
                "\n\tfield1='" + field1 + '\'' +
                "\n\t, field2=" + field2 +
                "\n\t, field3=" + field3 +
                "\n\t, id=" + id +
                "\n\t, status=" + status +
                "\n\t, registeredAt=" + registeredAt +
                "\n\t, updatedAt=" + updatedAt +
                "\n\t, contentModifiedAt=" + contentModifiedAt +
                "\n\t, deletedAt=" + deletedAt +
                "\n}";
    }
/*
    create table test_entity (
        field3 boolean not null,
        content_modified_at timestamp(6),
        deleted_at timestamp(6),
        field2 bigint,
        id bigint generated by default as identity,
        registered_at timestamp(6) not null,
        updated_at timestamp(6) not null,
        field1 varchar(255),
        status varchar(255) check (status in ('STANDBY','ACTIVE','SOFT_DELETED')),
        primary key (id)
    )
    */
}
