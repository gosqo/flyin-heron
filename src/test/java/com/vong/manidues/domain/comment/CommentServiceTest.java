package com.vong.manidues.domain.comment;

import com.vong.manidues.domain.board.Board;
import com.vong.manidues.domain.member.Member;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Slice;
import org.springframework.data.domain.SliceImpl;
import org.springframework.web.servlet.resource.NoResourceFoundException;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Optional;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.assertThatThrownBy;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyLong;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@ExtendWith({MockitoExtension.class})
class CommentServiceTest {

    private static final int COMMENT_LIST_SIZE = 100;
    @Mock
    private CommentRepository repository;
    @InjectMocks
    private CommentService service;

    private static List<Comment> getCommentList() {
        List<Comment> comments = new ArrayList<>();

        for (int i = 0; i < COMMENT_LIST_SIZE; i++) {
            Comment comment = Comment.builder()
                    .id(Integer.toUnsignedLong(i)) // Will be generated By Hibernate.
                    .content("Hello, comment." + i)
                    .member(mock(Member.class))
                    .board(mock(Board.class))
                    .build();

            comments.add(comment);
        }
        return comments;
    }

    @Test
    void getComment() {
        Comment comment = Comment.builder()
                .content("Hello, comment.")
                // 해당 필드에 mock 혹은 실제 값을 넣지 않으면,
                // service.get(Long id) 내부, CommentGetResponse.of(Comment entity) 에서
                // entity.getMember.getNickname 호출 시, member 가 null 이면 NullPointerException 발생.
                .member(mock(Member.class))
                // 위와 마찬가지로 entity.getBoard().getId() 시에 NPE 발생.
                .board(mock(Board.class))
                .build();

        when(repository.findById(anyLong())).thenReturn(Optional.of(comment));

        var returned = service.get(99L);

        assertThat(returned).isNotNull();
    }

    @Test
    void getComments() throws NoResourceFoundException {
        List<Comment> comments = getCommentList();

        int size = 6;
        int pageLimit = COMMENT_LIST_SIZE / size;
        int page = (int) (Math.random() * 100); // page index from 0

        if (page > pageLimit) page = page / 10;

        int fromIndex = page * size;
        int end = (page + 1) * size;
        int toIndex = Math.min(end, COMMENT_LIST_SIZE /* comments' size */);

        List<Comment> slicedContent = comments.subList(fromIndex, toIndex);
        Pageable pageable = PageRequest.of(page, size);
        boolean hasNext = end < COMMENT_LIST_SIZE;

        Slice<Comment> commentSlice = new SliceImpl<>(slicedContent, pageable, hasNext);

        when(repository.findByBoardId(anyLong(), any(Pageable.class))).thenReturn(commentSlice);

        var returned = service.getPageOf(1L, page + 1);

        if (hasNext) {
            assertThat(returned.getCommentPage().getContent().size()).isEqualTo(size);
            return;
        }

        assertThat(returned.getCommentPage().getContent().size()).isEqualTo(toIndex - fromIndex);
    }

    @Test
    @DisplayName("slice not exist throws")
    void sliceEmptyContentThrows() {
        List<Comment> comments = getCommentList();
        int requestPage = 18;

        //pageable
        int size = 6;
        int page = 16; // page index from 0

        Pageable pageable = PageRequest.of(page, size);
        boolean hasNext = false;
        List<Comment> emptyList = Collections.EMPTY_LIST;

        Slice<Comment> commentSlice = new SliceImpl<>(emptyList, pageable, hasNext);

        when(repository.findByBoardId(anyLong(), any(Pageable.class))).thenReturn(commentSlice);

            assertThatThrownBy(() -> service.getCommentSliceOf(1L, requestPage));
        }
    }
}
